<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift开发 | Mae Blog]]></title>
  <link href="http://zhouhongmeiblog.github.io/blog/categories/swiftkai-fa/atom.xml" rel="self"/>
  <link href="http://zhouhongmeiblog.github.io/"/>
  <updated>2014-08-26T14:29:35+08:00</updated>
  <id>http://zhouhongmeiblog.github.io/</id>
  <author>
    <name><![CDATA[maebook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift]]></title>
    <link href="http://zhouhongmeiblog.github.io/blog/2014/06/29/swift/"/>
    <updated>2014-06-29T15:10:36+08:00</updated>
    <id>http://zhouhongmeiblog.github.io/blog/2014/06/29/swift</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/06/29/swift.png" alt="image" /></p>

<!--more-->


<p>Swift一种编译式编程语言,由苹果公司推出,用来撰写OS X和iOS应用程序。2014年,在AppleWWDC所发布,设计Swift时,苹果公司有意让Swift与Objective-C共存在苹果公司的操作系统上。</p>

<h3>历史</h3>

<p>2010年7月,苹果开发者工具部门总监克里斯·拉特纳开始着手Swift编程语言的设计工作,以一年时间,完成基本架构后,他领导了一个设计团队大力参与其中。Swift大约历经4年的开发期,2014年6月发表。
苹果宣称Swift的特点是:快速、现代、安全、互动，而且明显优于Objective-C语言。Swift以LLVM编译,可以使用现有的Cocoa和Cocoa Touch框架。Xcode Playgrounds功能是Swift为苹果开发工具带来的最大创新，该功能提供强大的互动效果,能让Swift源代码在撰写过程中能实时显示出其运行结果。拉特纳本人强调,Playgrounds很大程度是受到布雷特·维克多（Bret Victor）理念的启发。</p>

<h3>特色</h3>

<p>Swift取消了Objective C的指针及其他不安全访问的使用,并舍弃Objective C早期套用Smalltalk之语法,全面改为句点表示法（dot-notation）。同许多script语言一样,Swift可以推断变量类型（var, variant）。同时,它提供了类似Java的命名空间(namespace)、泛型(generic)、运算对象重载（operator overloading）。Swift被简单的形容为 “没有C的Objective-C”（Objective-C without the C）。</p>

<h3>类型与变量</h3>

<p>在Cocoa与Cocoa Touch的环境下,许多共用的类物都放在Foundation Kit库下,这些类型包含了NSString字符串库 (使用 Unicode), 还有集合类型 NSArray 与 NSDictionary。Objective-C 提供了语法糖（syntactic sugar）的方式让这些对象可以集成在同一个语言里。例如NSString之间合并的表示法如下:</p>

<pre><code>NSString *str = @"hello,";
str = [str stringByAppendingString:@" world"];  
</code></pre>

<p>在Swift里, 字符串的累积可以用加法（+）运算对象作为第一级公民（First-class citizen）的方式直接完成, 上述的例子可以简化为</p>

<pre><code>var str = "hello,"; str += " world"
</code></pre>

<p>过去Cocoa（以及Cocoa Touch）的架构总是被分成两种版本，一种是可变的（mutable）,也就是可以在运行时期（runtime）改变；另一种是不可变的（immutable）,其初始值不可改变,例如NSArray与MSMutableArray就是数组的两种版本。在Swift语言的世界里仍延续这个传统,但更简化为使用 let 关键字去设置常数（constant variable）。至于可变的(Mutable)对象则使用var关键字。Swift语言使用类似C#或Javascript的var定义变量,但特性又不尽相同,Swift不会直接指派初始值给变量,亦即变量不会有默认值,所以使用var变量之前必须先初始化，不然会发生编译时期的错误。</p>

<p>为了方便使用,Swift还提供Optional的定义来声明nil-free references。声明Optional只需要在类型后面加上问号(?)即可。一旦var变量声明为Optional的，其初始值就会被默认为nil。Optional本质上是enum，有定义None和Some两种类型，nil即是Optional.None。</p>

<h3>库、运行时期与部署</h3>

<p>Swift在 Mac OS 和 iOS 平台可以和Object-C使用相同的运行时期(runtime)。这意味着Swift 程序可以运行于目前已存在的平台之上，包含 iOS 6 和 OS X 10.8 都可以运行Swift的程序。 更重要的, Swift 和 Obj-C 的代码可并存于单一程序内, 这种延伸就如同C 和 C++ 的关系一样。</p>

<p>为了争取大量的开发人员并重复使用已存在的代码, Xcode 6 允许在app target导入Objective-C文件供给Swift使用，通过Objective-C的桥接头文件（bridging header）来暴露给 Swift。当开发人员添加 Swift 文件到现有的Objective-C应用程序时，Xcode 会自动创建这些头文件。例如, 一个Swift 知名的类型 &ldquo;MyClass&rdquo; 可用于 Obj-C 的方式 #import &ldquo;MyClass-Swift.h"。</p>

<h3>存储器管理</h3>

<p>Swift全面使用自动引用计数(ARC)来管理存储器,取代过去Objective C的垃圾回收功能。过去在Objective-C中,强引用(strong reference)即为非ARC中的retain,而弱引用(weak reference)即为非ARC中的assign. 为了解决循环引用的问题,Swift提供unowned, 不能设定为optional types，不能加上问号(?)或惊叹号(!)。</p>

<h3>除错以及其他元素</h3>

<p>Xcode的除错机制针对Swift语言提供REPL（Read-Eval-Print Loop, 这是源自emacs的术语）环境,可以利用Swift语法来评估或与其他程序交互，使Swift编程具有类似Python与Ruby交互性接口（Interactive Shell）。</p>

<h3>类似Objective-C之处</h3>

<ul>
<li>基本数值类型（numeric types）大致相同 (例如Int, UInt, Float, Double)</li>
<li>大量的C 运算对象被移出Swift, 但又引入一些新运算对象。</li>
<li>大括号被用于组群陈述（group statements）。</li>
<li>变量之赋值使用等于符号, 但比较则使用“连续两个等于”(==)运算对象。还有一个新的运算对象，“连续三个等于”(===)被用来判断常数或变量之间是否为同一对象之实例(instance)。</li>
<li>中括号([], Square brackets)用于数组的表示, 声明阵例之后, 可以指派索引值(index)来进行元素(element)之访问。</li>
<li>控制陈述（control statement）, for, while, if, switch 与Ojbective-C都十分类似, 但有延伸功能, 像是 for in 用于集合(collection)的轮询, switch 还可以接受非整数的cases条件值, 诸如此类。</li>
</ul>


<h3>不同于Objective-C之处</h3>

<ul>
<li>陈述句（statement）不须再使用分号 (&lsquo;;&rsquo;)做为退出, 但分号还是可以在一行以内作为两个以上陈述的分隔。</li>
<li>头文件(Header files)不再需要。</li>
<li>注解方式 /<em> &hellip; </em>/ 可以为嵌套（nested）注解, 意思是指注解内可以再有注解, 过去有些C或C++编译器不支持嵌套注解。</li>
<li>强类型(strong type)</li>
<li>类型推论或隐含类型(Type inference)</li>
<li>支持泛型编程。</li>
<li>函数为第一等类型(first-class object)，这意味着函数可以作为其他函数的参数与返回值。</li>
<li>运算对象可在类型内重新定义 (运算对象重载)。可以生成新的运算对象。</li>
<li>字符串全方面支持 Unicode。某些字符甚至可以成为语言的名称。</li>
<li>许多C语言家族过去恶名昭彰的怪语法（error-prone behaviors）也被改变:

<ul>
<li>不再存在指针。</li>
<li>指派(Assignments)不再回传值。正确写法是 if (i==0) ，一般容易误写成 if (i=0) 会造成编译时期错误(compile-time error)。</li>
<li>在switch 的区块内不需要再使用 break 叙述句。另外, case后面都需要有可执行的代码（C或C++可连续使用多个case而不需要额外的代码）, 否则会发生编译错误。</li>
<li>变量和常数都要被初始化，而且数组(array)的界限也要确认清楚。</li>
<li>溢出（overflows）的问题。C语言没有强制整数类型（signed integers）的界限, 常常在运行时间发生问题。Swift可以通过整数类型的max或min属性取得最大值或最小值。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
